/*
===============================
üìö EJERCICIO: Gesti√≥n de Pr√©stamos de Libros
===============================

Este programa permite gestionar una biblioteca con las siguientes funcionalidades:

1. Registrar libros con su t√≠tulo, autor, a√±o, stock y lista de pr√©stamos.
2. Registrar pr√©stamos realizados por lectores.
3. Mostrar el listado de libros con su historial de pr√©stamos.
4. Validar si un libro tiene stock disponible antes de permitir el pr√©stamo.
5. Gestionar memoria din√°mica con estructuras anidadas (array de estructuras dentro de otra estructura).
6. Reforzar el uso de punteros, arrays din√°micos, estructuras y men√∫s interactivos.

üìå Cada libro tendr√° una lista din√°mica de pr√©stamos, con:
   - Nombre del lector
   - Fecha del pr√©stamo

üéØ Objetivo: aplicar todo lo aprendido y subir el nivel manejando relaciones entre estructuras y punteros de forma m√°s avanzada.

*/


#include <iostream>
using namespace std;

// Estructura para almacenar un pr√©stamo
struct Prestamo {
    string lector;
    string fecha;
};

// Estructura para representar un libro
struct Libro {
    string titulo;
    string autor;
    int anio;
    int stock;
    Prestamo* prestamos;       // Array din√°mico de pr√©stamos
    int cantidadPrestamos;     // N√∫mero actual de pr√©stamos
};

// Funci√≥n para cargar los libros
void cargarLibros(Libro* lista, int cantidad) {
    cout << "Por favor, introduce los datos necesarios:" << endl;

    for (int i = 0; i < cantidad; i++) {
        cin.ignore();
        cout << "\nLibro n√∫mero " << i + 1 << endl;

        cout << "T√≠tulo: ";
        getline(cin, lista[i].titulo);

        cout << "Autor: ";
        getline(cin, lista[i].autor);

        cout << "A√±o: ";
        cin >> lista[i].anio;

        cout << "Stock: ";
        cin >> lista[i].stock;

        // Inicializar array de pr√©stamos por cada libro
        lista[i].prestamos = new Prestamo[10];
        lista[i].cantidadPrestamos = 0;
    }
}

// Funci√≥n para registrar un pr√©stamo
void registrarPrestamos(Libro* lista, int cantidad, string tituloBuscado) {
    bool encontrado = false;

    for (int i = 0; i < cantidad; i++) {
        if (tituloBuscado == lista[i].titulo) {
            encontrado = true;

            if (lista[i].stock > 0) {
                cin.ignore();
                cout << "Introduce el nombre del propietario: ";
                getline(cin, lista[i].prestamos[lista[i].cantidadPrestamos].lector);

                cout << "Introduce la fecha del pr√©stamo (DD/MM/AAAA): ";
                getline(cin, lista[i].prestamos[lista[i].cantidadPrestamos].fecha);

                lista[i].cantidadPrestamos++;
                lista[i].stock--;

                cout << "‚úÖ Pr√©stamo registrado con √©xito." << endl;
            } else {
                cout << "‚ùå No se puede realizar el pr√©stamo. No hay stock disponible." << endl;
            }
            break;
        }
    }

    if (!encontrado) {
        cout << "‚ùå Este libro no existe en la biblioteca." << endl;
    }
}

// Funci√≥n para mostrar el historial de pr√©stamos de un libro
void mostrarHistorialPrestamosPorLibro(Libro* lista, int cantidad, string tituloBuscado) {
    bool encontrado = false;

    for (int i = 0; i < cantidad; i++) {
        if (tituloBuscado == lista[i].titulo) {
            encontrado = true;

            if (lista[i].cantidadPrestamos == 0) {
                cout << "‚ÑπÔ∏è El libro \"" << tituloBuscado << "\" no tiene pr√©stamos registrados.\n";
            } else {
                cout << "\nüìö Historial de pr√©stamos de \"" << tituloBuscado << "\":" << endl;
                for (int j = 0; j < lista[i].cantidadPrestamos; j++) {
                    cout << "\nPr√©stamo " << j + 1 << ":\n";
                    cout << "  Cliente: " << lista[i].prestamos[j].lector << endl;
                    cout << "  Fecha  : " << lista[i].prestamos[j].fecha << endl;
                }
            }
            break;
        }
    }

    if (!encontrado) {
        cout << "‚ùå El libro \"" << tituloBuscado << "\" no existe en la biblioteca." << endl;
    }
}

// Funci√≥n para mostrar todos los libros disponibles
void mostrarLibros(Libro* lista, int cantidad) {
    cout << "\n=== LISTADO DE LIBROS DISPONIBLES ===\n";
    for (int i = 0; i < cantidad; i++) {
        cout << i + 1 << ". T√≠tulo: " << lista[i].titulo << endl;
        cout << "   Autor : " << lista[i].autor << endl;
        cout << "   A√±o   : " << lista[i].anio << endl;
        cout << "   Stock : " << lista[i].stock << endl;
        cout << "-------------------------------" << endl;
    }
}

// Funci√≥n para buscar un libro por su t√≠tulo
void buscarLibroPorTitulo(Libro* lista, int cantidad, string titulo) {
    bool encontrado = false;

    for (int i = 0; i < cantidad; i++) {
        if (titulo == lista[i].titulo) {
            encontrado = true;
            if (lista[i].stock > 0) {
                cout << "‚úÖ " << titulo << " se encuentra en la lista y tiene " << lista[i].stock << " en stock." << endl;
            } else {
                cout << "‚ö†Ô∏è " << titulo << " est√° en la lista pero no hay stock disponible." << endl;
            }
            break;
        }
    }

    if (!encontrado) {
        cout << "‚ùå El libro \"" << titulo << "\" no se encuentra en la lista." << endl;
    }
}

// Mostrar libros anteriores al a√±o 2000
void mostrarLibrosAntesDel2000(Libro* lista, int cantidad) {
    int indice = 0;

    cout << "\nüìò Libros anteriores al a√±o 2000:\n";
    for (int i = 0; i < cantidad; i++) {
        if (lista[i].anio < 2000) {
            indice++;
            cout << indice << ". " << lista[i].titulo << " - " << lista[i].autor << " (" << lista[i].anio << ")\n";
        }
    }

    if (indice == 0) {
        cout << "No hay libros anteriores al a√±o 2000 en el cat√°logo." << endl;
    }
}

// Ordenar libros por a√±o (de m√°s antiguo a m√°s reciente)
void ordenarLibrosAnioPublicacion(Libro* lista, int cantidad) {
    for (int i = 0; i < cantidad; i++) {
        for (int j = i + 1; j < cantidad; j++) {
            if (lista[j].anio < lista[i].anio) {
                Libro temp = lista[i];
                lista[i] = lista[j];
                lista[j] = temp;
            }
        }
    }
}

// Modificar stock de un libro por t√≠tulo
void modificarStockLibro(Libro* lista, int cantidad, string titulo) {
    bool encontrado = false;

    for (int i = 0; i < cantidad; i++) {
        if (titulo == lista[i].titulo) {
            encontrado = true;
            cout << "Stock actual de \"" << titulo << "\": " << lista[i].stock << endl;
            cout << "Introduce la nueva cantidad en stock: ";
            cin >> lista[i].stock;
            cout << "‚úÖ Stock actualizado con √©xito.\n";
            break;
        }
    }

    if (!encontrado) {
        cout << "‚ùå El libro \"" << titulo << "\" no se encuentra disponible." << endl;
    }
}

// Mostrar libros agotados (stock = 0)
void mostrarLibrosSinStock(Libro* lista, int cantidad) {
    int indice = 0;
    cout << "\nüì¶ LIBROS AGOTADOS (STOCK = 0):\n";

    for (int i = 0; i < cantidad; i++) {
        if (lista[i].stock == 0) {
            indice++;
            cout << indice << ". " << lista[i].titulo << endl;
        }
    }

    if (indice == 0) {
        cout << "Todos los libros tienen unidades disponibles." << endl;
    }
}

// Funci√≥n principal
int main() {
    int cantidad;

    cout << "¬øCu√°ntos libros vas a introducir en el stock de la biblioteca? ";
    cin >> cantidad;

    Libro* lista = new Libro[cantidad];

    cargarLibros(lista, cantidad);

    int opcion;
    string tituloBuscado;

    do {
        cout << "\n========== MEN√ö BIBLIOTECA ==========" << endl;
        cout << "1. Mostrar todos los libros" << endl;
        cout << "2. Buscar libro por t√≠tulo" << endl;
        cout << "3. Mostrar libros anteriores al a√±o 2000" << endl;
        cout << "4. Ordenar libros por a√±o de publicaci√≥n" << endl;
        cout << "5. Modificar stock de un libro" << endl;
        cout << "6. Mostrar libros sin stock" << endl;
        cout << "7. Registrar pr√©stamo de un libro" << endl;
        cout << "8. Ver historial de pr√©stamos de un libro" << endl;
        cout << "0. Salir" << endl;
        cout << "Seleccione una opci√≥n: ";
        cin >> opcion;

        switch (opcion) {
            case 1:
                mostrarLibros(lista, cantidad);
                break;

            case 2:
                cin.ignore();
                cout << "Introduce el t√≠tulo del libro: ";
                getline(cin, tituloBuscado);
                buscarLibroPorTitulo(lista, cantidad, tituloBuscado);
                break;

            case 3:
                mostrarLibrosAntesDel2000(lista, cantidad);
                break;

            case 4:
                ordenarLibrosAnioPublicacion(lista, cantidad);
                mostrarLibros(lista, cantidad);
                break;

            case 5:
                cin.ignore();
                cout << "Introduce el t√≠tulo del libro: ";
                getline(cin, tituloBuscado);
                modificarStockLibro(lista, cantidad, tituloBuscado);
                break;

            case 6:
                mostrarLibrosSinStock(lista, cantidad);
                break;

            case 7:
                cin.ignore();
                cout << "Introduce el t√≠tulo del libro a prestar: ";
                getline(cin, tituloBuscado);
                registrarPrestamos(lista, cantidad, tituloBuscado);
                break;

            case 8:
                cin.ignore();
                cout << "Introduce el t√≠tulo del libro: ";
                getline(cin, tituloBuscado);
                mostrarHistorialPrestamosPorLibro(lista, cantidad, tituloBuscado);
                break;

            case 0:
                cout << "\nSaliendo del programa. ¬°Hasta luego!" << endl;
                break;

            default:
                cout << "‚ùå Opci√≥n no v√°lida. Intente de nuevo." << endl;
                break;
        }
    } while (opcion != 0);

    // Liberar memoria de los arrays de pr√©stamos
    for (int i = 0; i < cantidad; i++) {
        delete[] lista[i].prestamos;
    }
    delete[] lista;

    return 0;
}
